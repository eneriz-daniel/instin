import visa
import time
import numpy as np

N=100 # Number of frequencies to evaluate

#Oscilloscopes VISA addresses
VISA = ['USB0::0x0957::0x179B::MY51250764::INSTR', 'USB0::0x0957::0x179B::MY51136512::INSTR']

#Opening PyVISA resource manager
resources=visa.ResourceManager('@py')

N_instr = len(VISA)

# Generating the functions to sweep
freq = np.empty((2,N))

freq[0,:]=np.logspace(np.log10(15000),np.log10(25000),N)
freq[1,:]=np.logspace(np.log10(1500),np.log10(2500),N)

#Numpy arrays where to save the measures
inputV=np.zeros((N_instr,N))
outputV=np.zeros((N_instr,N))
phase=np.zeros((N_instr,N))

instruments=[]
for j in range(N_instr): instruments.append(resources.open_resource(VISA[j]))

print('Setting wave generator')
for j in range(N_instr): instruments[j].write('wgen:outp 0')
for j in range(N_instr): instruments[j].write('wgen:freq '+str(freq[j,0]))
for j in range(N_instr): instruments[j].write('wgen:func sin;volt 1;volt:offs 0')
for j in range(N_instr): instruments[j].write('wgen:outp 1')
for j in range(N_instr): instruments[j].write('chan1:disp 1;coup dc')
for j in range(N_instr): instruments[j].write('chan2:disp 1;coup dc')
for j in range(N_instr): instruments[j].write('autoscale')
for j in range(N_instr): instruments[j].write('chan1:disp 1;coup dc')
for j in range(N_instr): instruments[j].write('chan2:disp 1;coup dc')
time.sleep(1)

print('Setting display configuration')
for j in range(N_instr): instruments[j].write('chan1:offs 0;:chan2:offs 0')
for j in range(N_instr): instruments[j].write('trig:edge:sour chan1')
for j in range(N_instr): instruments[j].write('acq:count 8;type aver')
for j in range(N_instr): instruments[j].write('tim:rang '+str(5/freq[j,0]))
for j in range(N_instr): instruments[j].write('chan1:rang 2')
time.sleep(1)
for j in range(N_instr):
	print('Canal ' + str(j))
	vamp=float(instruments[j].query('meas:vamp? chan2'))
	time.sleep(0.1)
	instruments[j].write('chan2:rang '+str(5*vamp))

print('Starting measurements')
for i in range(N):
    print('Medida ' + str(i) + '/' + str(N))
    for j in range(N_instr): 
    	instruments[j].write('tim:rang '+str(5/freq[j,i])) #This ensures to have enough periods to measure
    	time.sleep(0.2)
    for j in range(N_instr): 
    	instruments[j].write('wgen:freq '+str(freq[j,i]))
    	time.sleep(0.2)
    for j in range(N_instr): 
    	inputV[j,i]=float(instruments[j].query('meas:vamp? chan1')) #Input signal amplitud
    	time.sleep(0.05)
    for j in range(N_instr): 
    	outputV[j,i]=float(instruments[j].query('meas:vamp? chan2')) #Output signal amplitud
    	time.sleep(0.05)
    for j in range(N_instr): 
    	phase[j,i]=float(instruments[j].query('meas:phas? chan2,chan1')) #Phase
    	time.sleep(0.05)
    for j in range(N_instr): 
    	instruments[j].write('chan2:rang '+str(outputV[j,i]*1.5)) #Resizing the yrange
    	#time.sleep(0.05)
    time.sleep(0.2)

print('Closing instruments')
for j in range(N_instr): instruments[j].close() 

#Files names root
name = "/home/pi/Desktop/data_BP_osc"

print('Writing output files')
for j in range(N_instr):
	fout = open(name+str(j)+".txt", 'w+')
	fout.write("VISA:"+VISA[j]+"\Hour:"+ time.strftime('%m%d%H%M.%S')+"\nFreq(Hz) Vin(V) Vout(V) Phase(deg)\n")
	for i in range(N): fout.write("%5.2f\t%5.2f\t%5.2f\t%5.2f\n" % (freq[j,i], inputV[j,i], outputV[j,i], phase[j,i]))
	fout.close()



























































































































































































































































































































































































































































































































































































































































































































































































































































































